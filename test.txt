
    для этих целей;
    • Предлагается использовать в СУБД объектно-ориентированную модель и
    формулируются базовые требования к ООСУБД.

К этому времени уже существовало несколько реализаций ООСУБД, но каждая из них

поддерживается или ограниченно поддерживается в Versant
• Ни ODL, ни OQL не поддерживаются (каждая ООСУБД предлагает собственные
языковые средства), запросы, результатами которых являются литеральные
значения или их множества не поддерживаются
• db4o поддерживает только Java или C#, причем для этих языков выпускаются
два разных продукта, остальные хотя и декларируют независимость от языков,
эта независимость является условной (необходимо соблюсти ряд требований,
например, по использованию определенных типов данных)
• Перевод существующего приложения достаточно трудоемок (например,
необходимо перейти на типы данных, поддерживаемые той или иной ООСУБД)
            Современное состояние
С конца 90-х годов в области ООСУБД наблюдался явный упадок. Основные
причины:
• Недостатки ООСУБД, главным из которых является зависимость от языков
программирования
• Отсутствие крупных игроков на рынке (таких как Oracle и IBM)
• Появление объектно-реляционных возможностей в большинстве популярных
SQL-ориентированных СУБД
• Маркетинговая политика крупных компаний, которые сумели внушить
пользователям должное доверие к универсальности, надежности и
масштабируемости своих SQL-ориентированных решений

С середины 2000-х до начала 2010-х некоторое повышение интереса к ООСУБД:
2005 г. – возникновение консорциума ODBMS.ORG
2006 г. – сформирована группа (в рамках OMG) по подготовке новой версии
стандарта объектно-ориентированной модели данных
2008 г. – первая после длительного перерыва конференция, посвященная
проблемам ООСУБД
      Объектные расширения SQL
К объектным расширениям языка SQL (SQL:1999, SQL:2003)
относятся:
• Структурные типы данных, определяемые пользователем;
• Типизированные таблицы;
• Типизированные представления;
• Ссылочные типы.

Кроме того, в стандартах SQL:1999, SQL:2003 появились типы
данных, не относящиеся к объектным расширениям, но
позволяющие хранить в таблицах неатомарные значения, что
также относится к решению проблемы «Impedance Mismatch».
   Типы данных, позволяющие хранить
         неатомарные значения
Типы данных, не относящиеся к ОО расширениям, но позволяющие хранить
неатомарные значения:
    • Массивы (1999): datatype ARRAY [max_cardinality] (может содержать не
    более max_cardinality элементов, индексация от 1)
    • Мультимножества (2003): datatype MULTISET
    • Анонимные строчные типы (1999): ROW( field1, …, fieldN ), где field ::=
    name datatype options
    • Многомерные массивы (2019): datatype MDARRAY [dimension_list], где
    dimension ::= optional_axis_name(min_limit : max_limit)

D. Misev, P. Baumann “SQL Support for Multidimensional Arrays”, Technical Report,
Jacobs University Bremen, 2017

datatype – тип элемента, любой допустимый в SQL тип данных, кроме самого
конструируемого типа коллекции.
          Типы данных, определяемые
                пользователем   объектных разработчиков (в виде объектов).
2. Реляционные данные принимаются в качестве модели, с которой следует работать,
   и объекты подстраиваются под этот подход. В этом случае проблема потери
   соответствия решается средствами базового объектно-ориентированного языка
   (используются известные методики преобразования, см. преобразование ER-
   модели в реляционную). Еще одна методика – BLOB-стратегия (упаковка части
   атрибутов в BLOB, за кодирование и декодирование которого отвечает middleware).
   Семенов, Морозов, Порох «Стратегии объектно-реляционного отображения: систематизация и анализ на
   основе паттернов». Труды ИСП РАН, том 8 № 2, 2004.
3. В БД сохраняются не только состояния объектов, но и метаданные, описывающие
   их структуру (определения классов), которые прозрачным образом могут
   использоваться в приложении. Middleware обеспечивает сборку объектных данных
   и их запись по нескольким таблицам с использованием метаданных.
   Klein, Stonis, Jankauskas “EXPRESS/SQL white paper”, 2001.
        Истинная реляционная модель
                   данных
Ключевая идея третьего манифеста – чтобы достичь требуемой объектной
функциональности, не надо абсолютно ничего делать с реляционной моделью;
на основе идей Э. Кодда можно реализовать СУБД, обеспечивающие
возможности по части представления и хранения данных произвольно сложной
структуры, не меньшие тех, которые обеспечивают объектные и SQL-
ориентированные СУБД.
Основное препятствие – тезис Кодда о нормализации отношений (1НФ): в
реляционной базе данных должны содержаться только отношения, атрибуты
которых определены на «доменах, элементы которых являются атомарными
(не составными) значениями».

К. Дейт: «Я согласен с Коддом, что желательно оставаться в рамках логики
первого порядка, если это возможно. В то же время я отвергаю идею
"атомарных значений", по крайней мере, в смысле абсолютной атомарности. В
Третьем манифесте мы допускаем наличие доменов, содержащих значения
произвольной сложности. Они могут быть даже отношениями. Тем не менее,
мы остаемся в рамках логики первого порядка.»
      Типы данных истинной реляционной
                   модели
Три категории типов данных: скалярные типы, кортежные типы и типы
отношений.
Скалярный тип – инкапсулированный тип, реальная внутренняя структура
которого скрыта от пользователей. Предлагаются механизмы определения
новых скалярных типов и операций над ними. Типом атрибута определяемого
скалярного типа может являться любой определенный к этому моменту
скалярный тип, кортежный тип или тип отношения.
Некоторые базовые скалярные типы данных должны быть предопределены в
системе. В число этих типов должен входить тип truth value (булевский тип) с
двумя значениями true и false.
Кортежный тип – тип данных, определяемый с помощью генератора типа TUPLE
c указанием множества пар <имя_атрибута, тип_атрибута> (заголовка кортежа).
Типом атрибута кортежного типа может являться любой определенный к этому
моменту скалярный тип, любой кортежный тип и тип отношения. Значением
кортежного типа является кортеж, представляющий собой множество
триплетов <имя_атрибута, тип_атрибута, значение_атрибута>, которое
соответствует заголовку кортежа этого типа.
      Типы данных истинной реляционной
                   модели
Тип отношения – тип данных, определяемый с помощью генератора типа
RELATION c указанием некоторого заголовка кортежа. Значением типа
отношения является заголовок отношения, совпадающий с заголовком кортежа
этого типа отношения, и тело отношения, представляющее собой множество
кортежей, соответствующих этому заголовку.
Кортежные типы и типы отношений не являются инкапсулированными: имеется
возможность прямого доступа к атрибутам. Для всех разновидностей типов
данных поддерживается модель множественного наследования, позволяющая
определять новые типы данных на основе уже определенных типов.
База данных – набор долговременно хранимых именованных переменных
отношений, каждая из которых определена на некотором типе отношения.

При таких определениях значениями атрибутов отношения могут быть не
только значения скалярных типов, но и кортежи, и другие отношения.
Третий манифест: «Каждый кортеж в отношении R содержит в точности одно
значение v для каждого атрибута A в заголовке отношения H. Иными словами, R
находится в первой нормальной форме, 1NF».
         Манипулирование данными в
        истинной реляционной модели
Эталонные средства манипулирования данными: реляционная алгебра Кодда,
реляционная алгебра А.

Языковые средства – язык запросов D:
• для выражения запросов используется алгебраический подход;
• запросы, адресуемые к сложным данным, формулируются более точно, чем
на SQL;
• это же касается сложных операций обновления;
• язык обладает вычислительной полнотой;
• язык претендует на то, чтобы стать открытым стандартом и заменить SQL.
     Поддержка целостности данных в
      истинной реляционной модели
В число обязательных требований истинной реляционной модели входит
требование определения хотя бы одного возможного ключа для каждой
переменной отношения.

Кроме того, говорится, что «любое условное выражение, которое является (или
логически эквивалентно) замкнутой правильно построенной формулой (WFF)
реляционного исчисления, должно быть допустимо в качестве спецификации
ограничения целостности».

Средства поддержки декларативной ссылочной целостности фигурируют только
в разделе рекомендуемых возможностей: «В D следует включить некоторую
декларативную сокращенную форму для выражения ссылочных ограничений
(называемых также ограничениями внешнего ключа)».
Реализации истинной реляционной
            модели
Единственное коммерческое решение:
Dataphor a.k.a D4 (разработка: 1999-2001, c 2001 по 2008:
коммерческий продукт компании Alphora, после ее приобретения
Database Consulting Group продукт выпускается под открытой
лицензией, текущий релиз в 2018 году, исходный код на С#)

Открытые проекты (университеты и индивидуальные разработчики):
• Alf (Ruby)
• Dee (Python)
• DuroDBMS (multiple languages)
• Rel (Java)
• TclRAL (TCL)

Сайт К. Дейта: http://www.thethirdmanifesto.com (похоже, закрыт)
Сайт Х. Дарвена: https://www.dcs.warwick.ac.uk/~hugh/TTM/
